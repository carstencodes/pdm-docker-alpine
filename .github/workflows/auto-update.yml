name: Automatic update released versions
on:
  schedule:
    - cron:  '0 18 * * *' # Each day at 6 pm
  workflow_dispatch: # Do nothing at all
jobs:
  auto-update:
    name: Perform automatic update
    runs-on: ubuntu-latest
    steps:
      - 
        name: Ensure PAT is set
        env:
          CI_CD_ACTION_AUTO_UPDATE_TOKEN: ${{ secrets.AUTO_UPDATE_TOKEN }}
        run: |
          if [ -z "${CI_CD_ACTION_AUTO_UPDATE_TOKEN}" ];
          then
            echo "Set repository secret AUTO_UPDATE_TOKEN to a non-empty value." >&2
            exit 1
          fi
      - 
        name: Checkout this repository
        uses: actions/checkout@v4
      - 
        name: Fetch latest released version of all repositories
        run: |
          for dependency in $(cat dependencies.txt); do
            if [ ! -f ${dependency}.repo ] || [ ! -f ${dependency}.version ];
            then
              echo "Cannot resolve ${dependency} version and repository information file." >&2
              exit 1
            fi
            curl -sL https://api.github.com/repos/$(cat ${dependency}.repo | tr -d [:space:] )/releases/latest | \
              jq -r ".tag_name" | tr -d [:space:] | sed s/v//g > ${dependency}.version
            echo Content of ${dependency}.version is now $(cat ${dependency}.version)
          done
      - 
        name: Get all files changed
        id: changed_files
        run: |
          modified_version_files=$(git status --porcelain --untracked-files=no *.version | sed 's/^ M //g')
          echo ::set-output name=modified_files::${modified_version_files}
          if [ -n "${modified_version_files}" ];
          then
            echo ::set-output name=any_modified::true
          else
            echo ::set-output name=any_modified::false
          fi
      - 
        name: Get modifications
        id: modifications
        if: ${{ steps.changed_files.outputs.any_modified == 'true' }}
        run: |
          touch output.txt
          for file in ${{ steps.changed_files.outputs.modified_files }};
          do
            echo Updating content of ${file} to $(cat ${file} | tr -d [:space:]). >> output.txt
          done
          message=$(cat output.txt)
          message="${message//'%'/'%25'}"
          message="${message//$'\n'/'%0A'}"
          message="${message//$'\r'/'%0D'}"
          rm output.txt
          echo ::set-output name=message::${message}
      - 
        name: Commit and create Pull request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        if: ${{ steps.changed_files.outputs.any_modified == 'true' }}
        with:
          token: ${{ secrets.AUTO_UPDATE_TOKEN }}
          add-paths: |
            *.version
          commit-message: "dep: Updating dependencies from other repositories"
          committer: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
          author: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
          signoff: false
          branch: auto-update/dependencies
          branch-suffix: timestamp
          delete-branch: true
          title: "Automatic update of dependent repositories"
          body: ${{ steps.modifications.outputs.message }}
          assignees: ${{ github.repository_owner }}
      - 
        name: Close Pull request automatically, if it succeeds
        uses: peter-evans/enable-pull-request-automerge@v1
        if: ${{ steps.changed_files.outputs.any_modified == 'true' }}
        with:
          token: ${{ secrets.AUTO_UPDATE_TOKEN }}
          pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
          merge-method: rebase
      - 
        name: Gotify Notification on success with update
        if: ${{ success() && steps.changed_files.outputs.any_modified == 'true' }}
        env:
          GOTIFY_API_BASE: ${{ secrets.GOTIFY_API_BASE }}
          GOTIFY_APP_TOKEN: ${{ secrets.GOTIFY_APP_TOKEN }}
        run: |
          curl -f -S "https://${GOTIFY_API_BASE}/message?token=${GOTIFY_APP_TOKEN}" \
               -F "title=Update of ${{ github.repository }} succeeded" \
               -F "message=${{ steps.modifications.outputs.message }}" \
               -F "priority=6"
      - 
        name: Gotify Notification on success without any update
        if: ${{ success() && steps.changed_files.outputs.any_modified == 'false' }}
        env:
          GOTIFY_API_BASE: ${{ secrets.GOTIFY_API_BASE }}
          GOTIFY_APP_TOKEN: ${{ secrets.GOTIFY_APP_TOKEN }}
        run: |
          curl -f -S "https://${GOTIFY_API_BASE}/message?token=${GOTIFY_APP_TOKEN}" \
               -F "title=No update of ${{ github.repository }}" \
               -F "message=Mo update has taken place. The repository is up to date." \
               -F "priority=6"
      - 
        name: Gotify Notification on error
        if: failure()
        env:
          GOTIFY_API_BASE: ${{ secrets.GOTIFY_API_BASE }}
          GOTIFY_APP_TOKEN: ${{ secrets.GOTIFY_APP_TOKEN }}
        run: |
          curl -f -S "https://${GOTIFY_API_BASE}/message?token=${GOTIFY_APP_TOKEN}" \
               -F "title=Update of ${{ github.repository }} failed" \
               -F "message=${{ steps.modifications.outputs.message }}" \
               -F "priority=9"
